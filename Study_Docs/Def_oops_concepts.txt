1)Operator overloading
In cpp we can define our own operators that work with different data types by using function overloading to overloads the operator which is called operator overload.

limitations:
First, almost any existing operator in C++ can be overloaded. The exceptions are: conditional (?:), sizeof, scope (::), member selector (.), and member pointer selector (.*).

Second, you can only overload the operators that exist. You can not create new operators or rename existing operators. For example, you could not create an operator ** to do exponents.

Third, at least one of the operands in an overloaded operator must be a user-defined type. This means you can not overload the plus operator to work with one integer and one double. However, you could overload the plus operator to work with an integer and a Mystring.

Fourth, it is not possible to change the number of operands an operator supports.

Usages:
we can restrict the dyanmic i. new class object creation by making private emplty new or new[] operator.
syntax of new

void* operator new (size_t size){
void * class =new class name

rturn class;
}

call from main

class a = new class;

void* operator new (size_t size){
void * class =new class name() // here we can use malloc also

rturn class;
}


malloc() vs new
Following are the differences between malloc() and operator new.:

Calling Constructors: new calls constructors, while malloc() does not. In fact primitive data types (char, int, float.. etc) can also be initialized with new. For example, below program prints 10.
#include<iostream>
 
using namespace std;
 
int main()
{
   int *n = new int(10); // initialization with new()
   cout << *n;
   getchar();
   return 0;
}
Run on IDE
operator vs function: new is an operator, while malloc() is a function.
return type: new returns exact data type, while malloc() returns void *.
Failure Condition: On failure, malloc() returns NULL where as new Throws.
Memory: In case of new, memory is allocated from free store where as in malloc() memory allocation is done from heap.
Overriding: We are allowed to override new operator where as we can not override the malloc() function legally.
Size: Required size of memory is calculated by compiler for new, where as we have to manually calculate size for malloc().


NEW	                     MALLOC
calls constructor	doesnot calls constructors
It is an operator	It is a function
Returns exact data type	Returns void *
on failure, Throws	On failure, returns NULL
Memory allocated from free store	Memory allocated from heap
can be overridden	cannot be overridden
size is calculated by compiler	size is calculated manually

call from main

class a = new class(parameters);

similar with delete


void* operator delete(void* p){

delete p;
}

main

delete p; // here we can use free also




2)prefix :

int a =8;
int b= ++a;

cout << b <<a<<endl;

0utput:-b=9 and a=9
a and b both the values are 9 bcoz firt it increament the value and then assign it to b 


3)postfix

int a =8;
int b= a++;

cout << b <<a<<endl;

0utput:- b=8 and a =9
a and b both the values are different bcoz firt it will assign value to b and increament the value of a

operator overloading syntax

Myclass operator +(const Myclass &obj1) const

Assignment operator 

Myclass & operator = (const Myclass &obj)

{
if (this != &obj)
{

value = obj.value

return *this
}

}


const keyword at the end of member funcion usage
:


It will not allow to change the called object parameter bcoz of we make that object as const by const keyword 

for example :

lass myname
{
private :
int value1;
int value2;

public:
myname(){

value1 =0;
value2 =0;
}
myname(int x,int y)  
{

value1 =x;
value2 =y;

}
int getvalue(int i)const {

myname e1 ; 
// value1=i;   In member function ‘int myname::getvalue(int) const’: it gives error: assignment of member ‘myname::value1’ in read-only objecterror: assignment of member ‘myname::value1’ in read-only object
 
e1.value1 =i; // it will allow to change another object state or memeber values but this functions called object values are no allow to change member values.
return value1* value2;

}


};

int main()
{

myname m1(3 ,4);
cout << m1.getvalue(4) <<endl;
}

const constructor:
Constructor is used to initialize the member variable,when the object is created.


constructor can not be cost because ctor is used to initilize the memeber parameters if we make ctor is private then how parameter will get initilize and compiler will not allow to make ctor as const .

it will gives error as ctor is not cv colified


Dangling pointer

A pointer pointing to a memory location that has been deleted (or freed) is called dangling pointer. There are three different ways where Pointer acts as dangling pointer

De-allocation of memory
// Deallocating a memory pointed by ptr causes
// dangling pointer
#include <stdlib.h>
#include <stdio.h>
int main()
{
    int *ptr = (int *)malloc(sizeof(int));
 
    // After below free call, ptr becomes a 
    // dangling pointer
    free(ptr); 
     
    // No more a dangling pointer
    ptr = NULL;
}
Run on IDE
Function Call
// The pointer pointing to local variable becomes
// dangling when local variable is static.
#include<stdio.h>
 
int *fun()
{
    // x is local variable and goes out of
    // scope after an execution of fun() is
    // over.
    int x = 5;
 
    return &x;
}
 
// Driver Code
int main()
{
    int *p = fun();
    fflush(stdin);
 
    // p points to something which is not
    // valid anymore
    printf("%d", *p);
    return 0;
}
Run on IDE
Output:



 

A garbage Address
The above problem doesn’t appear (or p doesn’t become dangling) if x is a static variable.

// The pointer pointing to local variable doesn't
// become dangling when local variable is static.
#include<stdio.h>
 
int *fun()
{
    // x now has scope throughout the program
    static int x = 5;
 
    return &x;
}
 
int main()
{
    int *p = fun();
    fflush(stdin);
     
    // Not a dangling pointer as it points
    // to static variable.
    printf("%d",*p);
}
Run on IDE
Output:

 5
Variable goes out of scope
void main()
{
   int *ptr;
   .....
   .....
   {
       int ch;
       ptr = &ch;
   } 
   .....   
   // Here ptr is dangling pointer
}
 

Void pointer

Void pointer is a specific pointer type – void * – a pointer that points to some data location in storage, which doesn’t have any specific type. Void refers to the type. Basically the type of data that it points to is can be any. If we assign address of char data type to void pointer it will become char Pointer, if int data type then int pointer and so on. Any pointer type is convertible to a void pointer hence it can point to any value.
Important Points

void pointers cannot be dereferenced. It can however be done using typecasting the void pointer
Pointer arithmetic is not possible on pointers of void due to lack of concrete value and thus size.
Example:

#include<stdlib.h>
 
int main()
{
    int x = 4;
    float y = 5.5;
     
    //A void pointer
    void *ptr;
    ptr = &x;
 
    // (int*)ptr - does type casting of void 
    // *((int*)ptr) dereferences the typecasted 
    // void pointer variable.
    printf("Integer variable is = %d", *( (int*) ptr) );
 
    // void pointer is now float
    ptr = &y; 
    printf("\nFloat variable is= %f", *( (float*) ptr) );
 
    return 0;
}
Run on IDE
Output:

Integer variable is = 4
Float variable is= 5.500000
Refer void pointer article for details.

 

NULL Pointer

NULL Pointer is a pointer which is pointing to nothing. In case, if we don’t have address to be assigned to a pointer, then we can simply use NULL.

#include <stdio.h>
int main()
{
    // Null Pointer
    int *ptr = NULL;
     
    printf("The value of ptr is %u", ptr);
    return 0;
}
Run on IDE
Output :

The value of ptr is 0
Important Points

NULL vs Uninitialized pointer – An uninitialized pointer stores an undefined value. A null pointer stores a defined value, but one that is defined by the environment to not be a valid address for any member or object.
NULL vs Void Pointer – Null pointer is a value, while void pointer is a type
 

Initilizer List

to initilize th cost data members usually we prefer the Initilizer List we cnnot do this with parametersied ctor

also reference also initilied with Initilizer List.

Default arguments and virtual function

Default arguments do not participate in signature of functions. So signatures of fun() in base class and derived class are considered same, hence the fun() of base class is overridden. Also, the default value is used at compile time. When compiler sees that an argument is missing in a function call, it substitutes the default value given. Therefore, in the above program, value of x is substituted at compile time, and at run time derived class’s fun() is called.

example
#include <iostream>
using namespace std;
 
class Base
{
public:
    virtual void fun ( int x = 0 )
    {
        cout << "Base::fun(), x = " << x << endl;
    }
};
 
class Derived : public Base
{
public:
    virtual void fun ( int x )
    {
        cout << "Derived::fun(), x = " << x << endl;
    }
};
 
 
int main()
{
    Derived d1;
    Base *bp = &d1;
    bp->fun();
    return 0;
}


Default arguments and virtual function:


Default arguments and virtual function
Predict the output of following C++ program.

#include <iostream>
using namespace std;
 
class Base
{
public:
    virtual void fun ( int x = 0 )
    {
        cout << "Base::fun(), x = " << x << endl;
    }
};
 
class Derived : public Base
{
public:
    virtual void fun ( int x )
    {
        cout << "Derived::fun(), x = " << x << endl;
    }
};
 
 
int main()
{
    Derived d1;
    Base *bp = &d1;
    bp->fun();
    return 0;
}
Run on IDE
Output:

Derived::fun(), x = 0
If we take a closer look at the output, we observe that fun() of derived class is called and default value of base class fun() is used.
Default arguments do not participate in signature of functions. So signatures of fun() in base class and derived class are considered same, hence the fun() of base class is overridden. Also, the default value is used at compile time. When compiler sees that an argument is missing in a function call, it substitutes the default value given. Therefore, in the above program, value of x is substituted at compile time, and at run time derived class’s fun() is called.

Now predict the output of following program.

#include <iostream>
using namespace std;
 
class Base
{
public:
    virtual void fun ( int x = 0)
    {
        cout << "Base::fun(), x = " << x << endl;
    }
};
 
class Derived : public Base
{
public:
    virtual void fun ( int x = 10 ) // NOTE THIS CHANGE
    {
        cout << "Derived::fun(), x = " << x << endl;
    }
};
 
 
int main()
{
    Derived d1;
    Base *bp = &d1;
    bp->fun(); // here also it will consider default value of paraent class
    return 0;
}
Run on IDE
The output of this program is same as the previous program. The reason is same, the default value is substituted at compile time. The fun() is called on bp which is a pointer of Base type. So compiler substitutes 0 (not 10).

In general, it is a best practice to avoid default values in virtual functions to avoid confusion (See this for more details)

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above









