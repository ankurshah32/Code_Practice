*************************************************************************************************************************************
## . What is the purpose of the each access specifier ?

There are 3 access specifiers for a class/struct/Union in C++. These access specifiers define how the members of the class can be
accessed. Of course, any member of a class is accessible within that class(Inside any member function of that same class). Moving
ahead to type of access specifiers, they are:

Public 		- The members declared as Public are accessible from outside the Class through an object of the class.
Protected 	- The members declared as Protected are accessible from outside the class BUT only in a class derived from it.
Private 	- These members are only accessible from within the class. No outside Access is allowed.

*************************************************************************************************************************************
##. Can a Constructor/Destructor be private ?

If the constructor/destructor is declared as private, then the class cannot be instantiated. This is true, however it can be instantiated
from another method in the class. Similarly, if the destructor is private , then the object can only be deleted from inside the class as
well.

*************************************************************************************************************************************
##. Can constructor and destructor be virtual ? 

To build an object the constructor must be of the same type as the object and because of this a constructor cannot be a virtual function.
But the same thing does not apply to destructors. ... You would use a virtual destructor if you ever expect a derived class to be
destroyed through a pointer to the base class.
 
*************************************************************************************************************************************
##. What is difference between Abstract Class and Interface ?

An abstract class is a class that has at least a pure virtual method. You can't create instances of that class, but you can have
implementation in it, that is shared with the derived classes.

an interface is a pure virtual class, with no implementation whatsoever.Interfaces cannot contain any data types(only functions)
whereas abstract classes can contain both.

*************************************************************************************************************************************
##. Can we delete this pointer ? 

Ideally delete operator should not be used for this pointer. However, if used, then following points must be considered.

1) delete operator works only for objects allocated using operator new . If the object is created using new, then we can
   do delete this, otherwise behavior is undefined.
2) Once delete this is done, any member of the deleted object should not be accessed after deletion.

Delete this is legal and does what you would expect: it calls your class's destructor and free the underlying memory.
After delete this returns, your this pointer value does not change, so it is now a dangling pointer that should not be dereferenced.
That includes implicit dereferencing using the class's member variables.

*************************************************************************************************************************************
##. Difference between Null char pointer and Null int pointer

Null pointer is a special reserved value of a pointer. A pointer of any type has such a reserved value. Formally, each specific pointer
type (int *, char * etc.) has its own dedicated null-pointer value. Conceptually, when a pointer has that null value it is not pointing
anywhere.

*************************************************************************************************************************************
##.Class:
--Class is a reference type and its object is created on the heap memory.
--Class can inherit the another class.
--Class can have the all types of constructor and destructor.
--The member variable of class can be initialized directly.
 
Structure
--Structure is a value type that is why its object is created on the stack memory.
--Structure does not support the inheritance.
--Structure can only have the parametrized constructor. it means a structure can not have the non-parametrized constructor,default
  constructor and destructor also.
--The member variable of structure can not be initialized directly.

*************************************************************************************************************************************
##. STORAGE CALSSES

	STORAGE CALSSES		KEYWORD 	LIFETIME 			VISIBILITY 		INITIAL VALUE
	
	Automatic 			auto 		Function Block 		Local 			Garbage
	External 			extern 		Whole Program 		Global 			Zero
	Static 				static 		Whole Program 		Local 			Zero
	Register 			register 	Function Block 		Local 			Garbage
	Mutable 			mutable 	Class 				Local 			Garbage

*************************************************************************************************************************************
 ## why to make Object Volatile ?

The volatile keyword is intended to prevent the compiler from applying any optimizations on objects that can change in ways that
cannot be determined by the compiler.Objects declared as volatile are omitted from optimization because their values can be 
changed by code outside the scope of current code at any time. The system always reads the current value of a volatile object from
the memory location rather than keeping its value in temporary register at the point it is requested, even if a previous instruction
asked for a value from the same object.

--Global variables modified by an interrupt service routine outside the scope(Geeks for Geeks)
--Global variables within a multi-threaded application

*************************************************************************************************************************************
## why to make function Volatile ?

volatile qualifier states that the member should be used with a volatile object(when used a volatile function all the member variables
will become volatile as well), that can be useful if you have a set of functions which are thread-safe, and another set which is not.
So you can design your class so that the thread-safe functions decleared with volatile qualifier, and if you want an object of that
class to be manipulated with threads or processes you will declear it as volatile.

*************************************************************************************************************************************
##. new Vs malloc();

	new 									malloc
	
	calls constructor 						doesnot calls constructors
	It is an operator 						It is a function
	Returns exact data type 				Returns void *
	on failure, Throws 	On failure, 		returns NULL
	Memory allocated from free store 		Memory allocated from heap
	can be overridden 						cannot be overridden
	size is calculated by compiler 			size is calculated manually			<---- new and free or malloc and delete

*************************************************************************************************************************************
-## What difference between 0 , NULL and \0 ? 
-
-0 - Integer constant for representing ZERO.
-0. - Double constant to represent ZERO.
-‘\0’ - Character constant to represent NULL (nochar)
-NULL - Macro to represent NULL pointer (May be expanded to ((void*)0) )
-nullptr - C++ keyword to represent NULL pointer.
-*************************************************************************************************************************************
